<?php include_once("util/Cache.php"); ?><?php include_once("util/ConfigUtil.php"); ?><?php include_once("util/LogUtil.php"); ?>    <?php	/**	 * Cache utilities	 * @author Stef	 *	 */	class CacheUtil	{		//Project cache details		const PROJECT_KEY_PREFIX		=	"PROJ_";		const PROJECT_CACHE_KEY			=	"projects";		private static $PROJECT_CACHE;		//Category cache details		const CATEGORY_KEY_PREFIX		=	"CAT_";		const CATEGORY_CACHE_KEY		=	"categories";		private static $CATEGORY_CACHE;		//Category option cache details		const CAT_OPT_KEY_PREFIX		=	"CATOPT_";		const CAT_OPT_CACHE_KEY		=	"catoptions";		private static $CATEGORY_OPTION_CACHE;				//Device cache details		const DEVICE_USER_PREFIX		=	"DEV_";		const DEVICE_CACHE_KEY			=	"devices";		private static $DEVICE_CACHE;		const USER_CACHE_KEY			=	"users";		private static $USER_CACHE;		const ALL						=	"ALL";		//Cached project details		static function getProjectsList()		{			return self::getCache(self::PROJECT_CACHE_KEY)->retrieve(self::ALL);		}		static function cacheProjectsList($projects)		{			return self::getCache(self::PROJECT_CACHE_KEY)->store(self::ALL,$projects);		}		static function clearCacheProjectsList()		{			return self::getCache(self::PROJECT_CACHE_KEY)->erase(self::ALL);		}		static function getCachedProject($projectID)		{			return self::getCache(self::PROJECT_CACHE_KEY)->retrieve(self::getCachedProjectKey($projectID));		}			static function removeCachedProject($projectID)		{			return self::getCache(self::PROJECT_CACHE_KEY)->erase(self::getCachedProjectKey($projectID));		}		static function addCachedProject($projectID, $project)		{			return self::getCache(self::PROJECT_CACHE_KEY)->store(self::getCachedProjectKey($projectID),$project);		}		static function removeAllCachedProjects()		{			return self::getCache(self::PROJECT_CACHE_KEY)->eraseAll();		}				private static function getCachedProjectKey($projectID)		{			return self::PROJECT_KEY_PREFIX.$projectID;		}				//Cached category details		static function getCategoriesList($projectID)		{			return self::getCache(self::CATEGORY_CACHE_KEY)->retrieve(self::getCachedCategoryListKey($projectID));		}		static function cacheCategoriesList($projectID, $categories)		{			return self::getCache(self::CATEGORY_CACHE_KEY)->store(self::getCachedCategoryListKey($projectID),$categories);		}		static function clearCacheCategoriesList($projectID)		{			return self::getCache(self::CATEGORY_CACHE_KEY)->erase(self::getCachedCategoryListKey($projectID));		}		static function getCachedCategory($projectID, $categoryID)		{			return self::getCache(self::CATEGORY_CACHE_KEY)->retrieve(self::getCachedCategoryKey($projectID,$categoryID));		}				static function removeCachedCategory($projectID, $categoryID)		{			return self::getCache(self::CATEGORY_CACHE_KEY)->erase(self::getCachedCategoryKey($projectID,$categoryID));		}				static function addCachedCategory($projectID, $categoryID, $category)		{			return self::getCache(self::CATEGORY_CACHE_KEY)->store(self::getCachedCategoryKey($projectID,$categoryID),$category);		}			static function removeAllCachedCategories()		{			return self::getCache(self::CATEGORY_CACHE_KEY)->eraseAll();		}		private static function getCachedCategoryKey($projectID,$categoryID)		{			return self::CATEGORY_KEY_PREFIX.$projectID."_".$categoryID;		}				private static function getCachedCategoryListKey($projectID)		{			return self::ALL."_".$projectID;		}		//Cached device details		static function getCachedDeviceUser($deviceID)		{			return self::getCache(self::DEVICE_CACHE_KEY)->retrieve(self::getCachedDeviceUserKey($deviceID));		}				static function addCachedDeviceUser($deviceID, $user)		{			return self::getCache(self::DEVICE_CACHE_KEY)->store(self::getCachedDeviceUserKey($deviceID),$user);		}			static function removeCachedDeviceUser($deviceID)		{			return self::getCache(self::DEVICE_CACHE_KEY)->erase(self::getCachedDeviceUserKey($deviceID));		}				static function removeAllCachedDeviceUser()		{			return self::getCache(self::DEVICE_CACHE_KEY)->eraseAll();		}			private static function getCachedDeviceUserKey($deviceID)		{			return self::DEVICE_USER_PREFIX.$deviceID;		}		//category options		static function getCachedCategoryOptions($projectID, $categoryID)		{			return self::getCache(self::CAT_OPT_CACHE_KEY)->retrieve(self::getCachedCategoryOptionsKey($projectID,$categoryID));		}				static function removeCachedCategoryOptions($projectID, $categoryID)		{			return self::getCache(self::CAT_OPT_CACHE_KEY)->erase(self::getCachedCategoryOptionsKey($projectID,$categoryID));		}				static function addCachedCategoryOptions($projectID, $categoryID, $category)		{			return self::getCache(self::CAT_OPT_CACHE_KEY)->store(self::getCachedCategoryOptionsKey($projectID,$categoryID),$category);		}				static function removeAllCachedCategoryOptions()		{			return self::getCache(self::CAT_OPT_CACHE_KEY)->eraseAll();		}				private static function getCachedCategoryOptionsKey($projectID,$categoryID)		{			return self::CAT_OPT_KEY_PREFIX.$projectID."_".$categoryID;		}				//user cache		static function getCachedUsers()		{			return self::getCache(self::USER_CACHE_KEY)->retrieve(self::ALL);		}				static function removeCachedUsers()		{			return self::getCache(self::USER_CACHE_KEY)->erase(self::ALL);		}				static function addCachedUsers($users)		{			return self::getCache(self::USER_CACHE_KEY)->store(self::ALL,$users);		}								private static function getCache($name)		{			LogUtil::debug("CacheUtil", "Getting cache for name ".$name);			if($name == self::DEVICE_CACHE_KEY)			{				if(empty(self::$DEVICE_CACHE))				{					///LogUtil::debug("CacheUtil", "Loading DEVICE cache on first use ".$name);					self::$DEVICE_CACHE = new Cache();					self::$DEVICE_CACHE->setCache(self::DEVICE_CACHE_KEY);				}				//LogUtil::debug("CacheUtil", "Returning DEVICE cache for ".$name);				return self::$DEVICE_CACHE;						}			if($name == self::PROJECT_CACHE_KEY)			{				if(empty(self::$PROJECT_CACHE))				{					//LogUtil::debug("CacheUtil", "Loading PROJECT cache on first use ".$name);					self::$PROJECT_CACHE = new Cache();					self::$PROJECT_CACHE->setCache(self::PROJECT_CACHE_KEY);				}				//LogUtil::debug("CacheUtil", "Returning PROJECT cache for ".$name);				return self::$PROJECT_CACHE;						}			if($name == self::CATEGORY_CACHE_KEY)			{				if(empty(self::$CATEGORY_CACHE))				{					//LogUtil::debug("CacheUtil", "Loading CATEGORY cache on first use ".$name);					self::$CATEGORY_CACHE = new Cache();					self::$CATEGORY_CACHE->setCache(self::CATEGORY_CACHE_KEY);				}				//LogUtil::debug("CacheUtil", "Returning CATEGORY cache for ".$name);				return self::$CATEGORY_CACHE;						}			if($name == self::CAT_OPT_CACHE_KEY)			{				if(empty(self::$CATEGORY_OPTION_CACHE))				{					//LogUtil::debug("CacheUtil", "Loading CATEGORY OPTIONS cache on first use ".$name);					self::$CATEGORY_OPTION_CACHE = new Cache();					self::$CATEGORY_OPTION_CACHE->setCache(self::CAT_OPT_CACHE_KEY);				}				//LogUtil::debug("CacheUtil", "Returning CATEGORY OPTIONS cache for ".$name);				return self::$CATEGORY_OPTION_CACHE;						}			if($name == self::USER_CACHE_KEY)			{				if(empty(self::$USER_CACHE))				{					//LogUtil::debug("CacheUtil", "Loading USER cache on first use ".$name);					self::$USER_CACHE = new Cache();					self::$USER_CACHE->setCache(self::USER_CACHE_KEY);				}				//LogUtil::debug("CacheUtil", "Returning USER cache for ".$name);				return self::$USER_CACHE;						}			LogUtil::error("CacheUtil", "No CACHE found for ".$name);		}			}?>